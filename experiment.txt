{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "from sklearn.datasets import load_iris\n",
    "from  scipy.spatial.distance import euclidean\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.decomposition import PCA\n",
    "import numpy as np\n",
    "import random, sys\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy import ndimage\n",
    "import cPickle as pickle\n",
    "import scipy.io.wavfile as wav\n",
    "from pylab import plt\n",
    "from scipy.signal import butter, lfilter, freqz\n",
    "from sklearn.cross_validation import train_test_split\n",
    "from librosa.util import normalize\n",
    "import kmeans as km\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Regular Kmeans Experiment\n",
    "-----------------------------------------------------"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Run regular kmeans\n",
    "* Run regular kmeans and visualize it\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "init\n",
      "Start kmeans\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n/IMgCErI/wH7maPXNh9m/gAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10e424f90>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def plotPCA(X, y, centroids):\n",
    "  pca = PCA()\n",
    "  pca.fit(X)\n",
    "  X_pca = pca.transform(X)\n",
    "  centroids_pca = pca.transform(centroids)\n",
    "  plt.scatter(X_pca[:, 0], X_pca[:, 1], c=y, linewidths=0, s=30)\n",
    "  plt.scatter(centroids_pca[:, 0], centroids_pca[:, 1], linewidths=0, s=200, marker=(5, 1), c=[i for i in xrange(len(centroids_pca))])\n",
    "  plt.xlabel('first principal component')\n",
    "  plt.ylabel('second principal component')\n",
    "  plt.show()\n",
    "\n",
    "#Data import and preprocessing\n",
    "scaler = StandardScaler()\n",
    "iris = load_iris()\n",
    "X, y = iris.data, iris.target\n",
    "scaler.fit(X)\n",
    "X = scaler.transform(X)\n",
    "#regular kmeans\n",
    "kmeans = km.mykmeans(10, 50)\n",
    "kmeans.mykmeans(X)\n",
    "centroids = kmeans.centroids()\n",
    "y = kmeans.getGroup(X)\n",
    "km.plotPCA(X, y, centroids)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Run kmeans_multi\n",
    "* Run kmeans_multi and visualize it\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Start kmeans\n",
      "Iteration: 1 noImproveCount 0\n",
      "Iteration: 2 noImproveCount 0\n",
      "improvement 0.190682091748\n",
      "Iteration: 3 noImproveCount 0\n",
      "improvement 0.0169025207538\n",
      "Iteration: 4 noImproveCount 0\n",
      "improvement 0.00257984588397\n",
      "Iteration: 5 noImproveCount 0\n",
      "improvement 0.00252197934345\n",
      "Iteration: 6 noImproveCount 0\n",
      "improvement 0.0028436987055\n",
      "Iteration: 7 noImproveCount 0\n",
      "improvement 1.63916301211e-05\n",
      "Iteration: 8 noImproveCount 1\n",
      "improvement 0.000149711717629\n",
      "Iteration: 9 noImproveCount 0\n",
      "improvement 0.000771263758817\n",
      "Iteration: 10 noImproveCount 0\n",
      "improvement 0.00308858706371\n",
      "Iteration: 11 noImproveCount 0\n",
      "improvement 0.00203323536214\n",
      "Iteration: 12 noImproveCount 0\n",
      "improvement 0.0\n",
      "Iteration: 13 noImproveCount 1\n",
      "improvement 0.0\n",
      "Iteration: 14 noImproveCount 2\n",
      "improvement 0.0\n",
      "Iteration: 15 noImproveCount 3\n",
      "improvement 0.0\n",
      "Iteration: 16 noImproveCount 4\n",
      "improvement 0.0\n",
      "Iteration: 17 noImproveCount 5\n",
      "improvement 0.0\n",
      "Iteration: 18 noImproveCount 6\n",
      "improvement 0.0\n",
      "Iteration: 19 noImproveCount 7\n",
      "improvement 0.0\n",
      "Iteration: 20 noImproveCount 8\n",
      "improvement 0.0\n",
      "Iteration: 21 noImproveCount 9\n",
      "improvement 0.0\n",
      "Iteration: 22 noImproveCount 10\n",
      "improvement 0.0\n",
      "Iteration: 23 noImproveCount 11\n",
      "improvement 0.0\n",
      "Iteration: 24 noImproveCount 12\n",
      "improvement 0.0\n",
      "Iteration: 25 noImproveCount 13\n",
      "improvement 0.0\n",
      "Iteration: 26 noImproveCount 14\n",
      "improvement 0.0\n",
      "Iteration: 27 noImproveCount 15\n",
      "improvement 0.0\n",
      "Iteration: 28 noImproveCount 16\n",
      "improvement 0.0\n",
      "Iteration: 29 noImproveCount 17\n",
      "improvement 0.0\n",
      "Iteration: 30 noImproveCount 18\n",
      "improvement 0.0\n",
      "Iteration: 31 noImproveCount 19\n",
      "improvement 0.0\n",
      "Iteration: 32 noImproveCount 20\n",
      "improvement 0.0\n",
      "Iteration: 33 noImproveCount 21\n",
      "improvement 0.0\n",
      "Iteration: 34 noImproveCount 22\n",
      "improvement 0.0\n",
      "Iteration: 35 noImproveCount 23\n",
      "improvement 0.0\n",
      "Iteration: 36 noImproveCount 24\n",
      "improvement 0.0\n",
      "Iteration: 37 noImproveCount 25\n",
      "improvement 0.0\n",
      "Iteration: 38 noImproveCount 26\n",
      "improvement 0.0\n",
      "Iteration: 39 noImproveCount 27\n",
      "improvement 0.0\n",
      "Iteration: 40 noImproveCount 28\n",
      "improvement 0.0\n",
      "Iteration: 41 noImproveCount 29\n",
      "improvement 0.0\n",
      "Iteration: 42 noImproveCount 30\n",
      "improvement 0.0\n",
      "Iteration: 43 noImproveCount 31\n",
      "improvement 0.0\n",
      "Iteration: 44 noImproveCount 32\n",
      "improvement 0.0\n",
      "Iteration: 45 noImproveCount 33\n",
      "improvement 0.0\n",
      "Iteration: 46 noImproveCount 34\n",
      "improvement 0.0\n",
      "Iteration: 47 noImproveCount 35\n",
      "improvement 0.0\n",
      "Iteration: 48 noImproveCount 36\n",
      "improvement 0.0\n",
      "Iteration: 49 noImproveCount 37\n",
      "improvement 0.0\n",
      "Iteration: 50 noImproveCount 38\n",
      "improvement 0.0\n",
      "Iteration: 51 noImproveCount 39\n",
      "improvement 0.0\n",
      "Iteration: 52 noImproveCount 40\n",
      "improvement 0.0\n",
      "Iteration: 53 noImproveCount 41\n",
      "improvement 0.0\n",
      "Iteration: 54 noImproveCount 42\n",
      "improvement 0.0\n",
      "Iteration: 55 noImproveCount 43\n",
      "improvement 0.0\n",
      "Iteration: 56 noImproveCount 44\n",
      "improvement 0.0\n",
      "Iteration: 57 noImproveCount 45\n",
      "improvement 0.0\n",
      "Iteration: 58 noImproveCount 46\n",
      "improvement 0.0\n",
      "Iteration: 59 noImproveCount 47\n",
      "improvement"
     ]
    }
   ],
   "source": [
    "def plotBeforeAfterFilter(originalS, myFilter, myFilter_time, filteredS, genere, filter_idx):\n",
    "  fig, (ax_orig, ax_win, ax_winT, ax_filt) = plt.subplots(4, 1, sharex=True)\n",
    "#kmeans_multi\n",
    "mykmeans_multi = km.mykmeans_multi(10, 100)\n",
    "mykmeans_multi.mykmeans(X)\n",
    "centroids = mykmeans_multi.getBestCentroids()\n",
    "y = mykmeans_multi.getGroup(X, centroids)\n",
    "centroids_all = mykmeans_multi.getCentroidsOverIteration()\n",
    "distortions = mykmeans_multi.getDistortionsOverIteration()\n",
    "print 'distortions', distortions\n",
    "km.plotPCA_multi(X, y, centroids, centroids_all, distortions)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Effect of lowpass filter\n",
    "* To visualize the effect of lowpass filter, here we did experiment on two approaches. One is creating a signal wih noise append, and the other one is use the real clip from our sample, see what is the effect if the signal being low passed\n",
    "* From the first figure attached, we designed a order of 6 lowpassed filter with 8000Hz cutoff and 22050Hz sampling rate. Then we created a signal with 1.2Hz combined with 9000Hz noise appened. Since frequency of noise is very high, so we can see there are lots of high-frequent ripples along the curve of the 1.2Hz signal. Then, after lowpass filtered, signal became cleaners but can still noticed certain ripples. I think this is due to the lowpass will never being able to cutoff at 8000Hz sharp, but a curve gradually decrease to 0, therefore there are signal between 8000 to 9000 that still existed in the signal.\n",
    "* Since our mel-frequency banks ranged from 0 to 6000Hz, we decide to design a order of 6 lowpass filter with 6500Hz cutoff for our project\n",
    "* Then, we tested one the signal from one of the clip and performed lowpass. As we can see from the second attached figure, there are lots of high frequent signals being removed, and leave cleaner signal with lower magnitude"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "from scipy.signal import butter, lfilter, freqz\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "def generate_melbank(f1=1000, f2=8000):\n",
    "  melmat, (melfreq, fftfreq) = melbank.compute_melmat(12, f1, f2, num_fft_bands=4097, sample_rate=22050)\n",
    "  return melmat, (melfreq, fftfreq)\n",
    "    \n",
    "def plotBeforeAfterFilter(originalS, myFilter, myFilter_time, filteredS, genere, filter_idx):\n",
    "  fig, (ax_orig, ax_win, ax_winT, ax_filt) = plt.subplots(4, 1, sharex=True)\n",
    "  ax_orig.plot(originalS)\n",
    "  ax_orig.set_title('Original pulse')\n",
    "  ax_orig.margins(0, 0.1)\n",
    "  ax_win.plot(myFilter)\n",
    "  ax_win.set_title('str(filter_idx)'+' Filter impulse response--FrequencyDomain')\n",
    "  ax_win.margins(0, 0.1)\n",
    "  ax_winT.plot(myFilter_time)\n",
    "  ax_winT.set_title('str(filter_idx)'+' Filter impulse response--TimeDomain')\n",
    "  ax_winT.margins(0, 0.1)\n",
    "  ax_filt.plot(filteredS)\n",
    "  ax_filt.set_title('Filtered signal')\n",
    "  ax_filt.margins(0, 0.1)\n",
    "  fig.tight_layout()\n",
    "\n",
    "def butter_lowpass(cutoff, fs, order=5):\n",
    "  nyq = 0.5 * fs\n",
    "  normal_cutoff = cutoff / nyq\n",
    "  b, a = butter(order, normal_cutoff, btype='low', analog=False)\n",
    "  return b, a\n",
    "\n",
    "def butter_lowpass_filter(data, cutoff, fs, order=5):\n",
    "  b, a = butter_lowpass(cutoff, fs, order=order)\n",
    "  y = lfilter(b, a, data)\n",
    "  return y\n",
    "\n",
    "order = 6\n",
    "fs = 22050       # sample rate, Hz\n",
    "cutoff = 8000  # desired cutoff frequency of the filter, Hz\n",
    "# Get the filter coefficients so we can check its frequency response.\n",
    "b, a = butter_lowpass(cutoff, fs, order)\n",
    "\n",
    "# Plot the frequency response.\n",
    "w, h = freqz(b, a, worN=8000)\n",
    "plt.figure(1)\n",
    "plt.subplot(411)\n",
    "plt.plot(0.5*fs*w/np.pi, np.abs(h), 'b')\n",
    "plt.plot(cutoff, 0.5*np.sqrt(2), 'ko')\n",
    "plt.axvline(cutoff, color='k')\n",
    "plt.xlim(0, 0.5*fs)\n",
    "plt.title(\"Lowpass Filter Frequency Response\")\n",
    "plt.xlabel('Frequency [Hz]')\n",
    "plt.grid()\n",
    "\n",
    "T = 5.0         # seconds\n",
    "n = int(T * fs) # total number of samples\n",
    "t = np.linspace(0, T, n, endpoint=False)\n",
    "# \"Noisy\" data.  We want to recover the 1.2 Hz signal from this.\n",
    "data = np.sin(1.2*2*np.pi*t) + 0.5*np.sin(9000*2*np.pi*t)\n",
    "\n",
    "# Filter the data, and plot both the original and filtered signals.\n",
    "y = butter_lowpass_filter(data, cutoff, fs, order)\n",
    "\n",
    "plt.subplot(412)\n",
    "plt.plot(t, data, 'b-', label='data')\n",
    "plt.plot(t, y, 'g-', linewidth=2, label='filtered data')\n",
    "plt.xlabel('Time [sec]')\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "\n",
    "plt.subplots_adjust(hspace=0.35)\n",
    "\n",
    "samples = pickle.load( open( \"./data/data_small_correctFormat.in\", \"rb\" ) )\n",
    "ourSample = butter_lowpass_filter(samples['classical'][0][0], 50, 22050, 6)\n",
    "\n",
    "plt.subplot(413)\n",
    "plt.plot(samples['classical'][0][0], 'b-', linewidth=2, label='classical_0')\n",
    "plt.xlabel('Data points')\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(414)\n",
    "plt.plot(ourSample, 'g-', linewidth=2, label='filtered classical_0')\n",
    "plt.xlabel('Data points')\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Scattering procedures\n",
    "* To demonstrate the procedures of signal scattering in high-level point of view, here are the codes from signalScattering.py\n",
    "```python\n",
    "if __name__ == '__main__':\n",
    "  '''Get my mel-frequency bank'''\n",
    "  melmat, (melfreq, fftfreq) = generate_melbank(0, 6000)\n",
    "\n",
    "  '''Transfrom mel-frequency to time domain'''\n",
    "  melmat_time = freq2timeDomain(melmat)\n",
    "\n",
    "  '''Read in data'''\n",
    "  samples = pickle.load( open( \"./data/data.in\", \"rb\" ) )\n",
    "\n",
    "  '''Example of performing lowpass on given signal'''\n",
    "   y = butter_lowpass_filter(samples_small['classical'][0][0], 50, 22050, 6)\n",
    "\n",
    "  '''samples_small_scattered will be the scattered result (plus lowpass filtered) from samples_small'''\n",
    "  samples_small_scattered = scatteringHandler(melmat_time, samples_small)```\n",
    "  \n",
    "* Where scatteringHandler includes:\n",
    "\n",
    "```python\n",
    " def scatteringHandler(melmat_time, samples, numSongs):\n",
    "  for genere in samples.keys():\n",
    "    songs = samples[genere]\n",
    "    for song_idx in xrange(numSongs):\n",
    "      song = songs[song_idx]\n",
    "      result = scattering(song, melmat_time)\n",
    "      energy_results = map(shortTermEnergy, result)\n",
    "      songs[song_idx] = energy_results\n",
    "  return samples\n",
    " \n",
    " def scattering(song, melmat_time):\n",
    "  resultForThisSong = []\n",
    "  for clip_0order in song:\n",
    "    resultForThisSong.append(clip_0order) #append zero order\n",
    "    for filter_idx1 in range(len(melmat_time)):\n",
    "      melBank1 = melmat_time[filter_idx1]\n",
    "      clip_1order = np.convolve(clip_0order, melBank1)\n",
    "      resultForThisSong.append(clip_1order) #append first order\n",
    "      for filter_idx2 in range(filter_idx1+1, len(melmat_time)):\n",
    "        melBank2 = melmat_time[filter_idx2]\n",
    "        clip_2order = np.convolve(clip_1order, melBank2)\n",
    "        resultForThisSong.append(clip_2order) #append second order\n",
    "  song = map(butter_lowpass_filter, resultForThisSong)\n",
    "  return song\n",
    "\n",
    "def shortTermEnergy(frame):\n",
    "  return sum( [ abs(x)**2 for x in frame ] ) / len(frame)```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
